require('dotenv').config();
const { Bot, GrammyError, HttpError} = require('grammy');
const express = require('express');

const fetchData = require('./fetchData');
const aboutData = require('./about.json');
const bot = new Bot(process.env.BOT_API_KEY);

const app = express();
const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
    console.log(`–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  });

bot.api.setMyCommands([
    {
        command: 'start', 
        description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞',
    },
    {
        command: 'menu', 
        description: '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é',
    },
    {
        command: 'search', 
        description: '–ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É',
    },
    {
        command: 'about_lucciola', 
        description: '–û –Ω–∞—Å',
    },
]);

bot.command('start', async (ctx) => {
    const message = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–Ω–∏–∂–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ Lucciola Booksü§ñüìö";
    
    await ctx.reply(message);
    await showMenu(ctx);
});

bot.on('callback_query:data', async (ctx) => {
    const data = ctx.callbackQuery.data;
    
    switch (data) {
        case 'about_shop':
            await aboutShop(ctx);
            break;
        case 'about_library':
            await aboutLibrary(ctx);
            break;
        case 'about_preorder':
            await aboutPreorder(ctx);
            break;
        case 'about_delivery':
            await aboutDelivery(ctx);
            break;
        case 'return_to_menu':
            await showMenu(ctx);
            break;
        case 'pre_order':
            await askForPreOrder(ctx);
            break;
        case 'about_lucciola':
            await aboutLucciolaBooks(ctx);
            break;
        default:
            break;
    }
});

bot.command('menu', async (ctx) => {
    await showMenu(ctx);
});

bot.command('search', async (ctx) => {
    await askForBook(ctx);
});

bot.command('about_lucciola', async (ctx) => {
    await aboutLucciolaBooks(ctx);
});

async function showMenu(ctx) {
    const menuKeyboard = {
        keyboard: [
            [{ text: '–ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É üìñ' }],
            [{ text: '–£–∑–Ω–∞—Ç—å –æ Lucciola Books üëÄ' }],
            [{ text: '–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ üì¶' }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
    };

    await ctx.reply("–ú–æ–≥—É –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∫–Ω–∏–≥—É, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∏–ª–∏ –æ—Ñ–æ—Ä–º–ª—é –ø—Ä–µ–¥–∑–∞–∫–∞–∑.\n\n" +
    "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", {
        reply_markup: menuKeyboard,
    });
}

bot.on('message', async (ctx) => {
    const text = ctx.message.text;

    console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", text);

    switch (text) {
        case '–ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É üìñ':
            await askForBook(ctx);
            break;
        case '–£–∑–Ω–∞—Ç—å –æ Lucciola Books üëÄ':
            await aboutLucciolaBooks(ctx);
            break;
        case '–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ üì¶':
            await askForPreOrder(ctx); 
            break;
        default:
            await searchBooks(ctx, text);
            break;
    }
});

// –ö–µ–π—Å -- –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É

async function askForBook(ctx) {
    await ctx.reply("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏, –∞ —è —É–∑–Ω–∞—é, –µ—Å—Ç—å –ª–∏ –æ–Ω–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ üîç");
}

bot.command('search', async (ctx) => {
    ctx.session = ctx.session || {};
    
    if (!ctx.session.state || ctx.session.state !== 'awaitingBookInfo') {
        await askForBook(ctx);
        ctx.session.state = 'awaitingBookInfo';
        console.log("–°–æ—Å—Ç–æ—è–Ω–∏–µ:", ctx.session.state);
    }
});

bot.on('callback_query:data', async (ctx) => {
    if (ctx.callbackQuery.data === 'search') {
        await askForBook(ctx);
    }
});

bot.on('message', async (ctx) => {
    const text = ctx.message.text;

    console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", text);
    console.log("–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ searchBooks");

    ctx.session = ctx.session || {};
    ctx.session.state = 'awaitingBookInfo';

    if (ctx.session && ctx.session.state === 'awaitingBookInfo') {
        
        await searchBooks(ctx, text);
        console.log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ message:", ctx.session.state);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ
        delete ctx.session.state;
        console.log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:", ctx.session.state);
    }
});

async function searchBooks(ctx, searchText) {
    try {
        const allBooks = await fetchData();
  
        const foundBooks = allBooks.filter(book => {
        return book.stock > 0 && 
               book.title.toLowerCase().includes(searchText.toLowerCase()) || 
               book.author.toLowerCase().includes(searchText.toLowerCase());
      });

      console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", foundBooks);
  
      if (foundBooks.length > 0) {
        const booksInfo = foundBooks.map(book => {
            let info = `üìö –ù–∞–∑–≤–∞–Ω–∏–µ: _${book.title}_\nüë®‚Äçüíº –ê–≤—Ç–æ—Ä: _${book.author}_\n`;
                info += `üí∞ –¶–µ–Ω–∞: _${book.price} GEL_`;
                if (book.rentPrice !== null) {
                    info += `\nüîñ –¶–µ–Ω–∞ –∑–∞ –∞—Ä–µ–Ω–¥—É: _${book.rentPrice} GEL_`;
                }
                if (book.condition === '–ù–æ–≤–∞—è') {
                    info += `\n[üîó –°—Å—ã–ª–∫–∞](https://lucciola-books.vercel.app/shop/${book.id})`;
                } else if (book.condition === '–ë/–£') {
                    info += `\n[üîó –°—Å—ã–ª–∫–∞](https://lucciola-books.vercel.app/library/${book.id})`;
                }
                return info;
        }).join('\n\n');

        console.log("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–∞—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", booksInfo);

        await ctx.reply(`*–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:*\n\n${booksInfo}`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìç –í –º–µ–Ω—é', callback_data: 'return_to_menu' }]
                ]
            },
            parse_mode: 'Markdown'
        });
    } else {
        await ctx.reply("–ö–Ω–∏–≥–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ –∞–≤—Ç–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üò¢\n–ü—Ä–æ–≤–µ—Ä—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É.\n\n–ï—Å–ª–∏ –∫–Ω–∏–≥–∏ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, –º—ã –º–æ–∂–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑!", {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úçüèª –ü—Ä–µ–¥–∑–∞–∫–∞–∑', callback_data: 'pre_order' },
                    { text: 'üìç –í –º–µ–Ω—é', callback_data: 'return_to_menu' }]
                ]
            }
        });
    }

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
};

// –∫–µ–π—Å -- –£–∑–Ω–∞—Ç—å –æ Lucciola Books 

async function aboutLucciolaBooks(ctx) {
    const aboutText = "[Lucciola Books](https://lucciola-books.vercel.app/) ‚Äî —ç—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤ –¢–±–∏–ª–∏—Å–∏ –∏ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω –∫–Ω–∏–≥ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –ì—Ä—É–∑–∏–∏.\n\n –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥–æ—Ä–æ–±–Ω–µ–µ: ";
    await ctx.reply(aboutText, {
        reply_markup: {
            inline_keyboard: [
                [   { text: 'üìö –û –º–∞–≥–∞–∑–∏–Ω–µ', callback_data: 'about_shop' },
                    { text: 'üìñ –û –±–∏–±–ª–∏–æ—Ç–µ–∫–µ', callback_data: 'about_library' }],
                [   { text: '‚úçüèª –û –ø—Ä–µ–¥–∑–∞–∫–∞–∑–µ', callback_data: 'about_preorder' },
                    { text: 'üì¶ –û –¥–æ—Å—Ç–∞–≤–∫–µ', callback_data: 'about_delivery' }],
                [
                    { text: 'üìç –í –º–µ–Ω—é', callback_data: 'return_to_menu' }]
            ]
        },
        parse_mode: 'Markdown'
    });
}

async function aboutShop(ctx) {
    const shopData = aboutData.shop;

    let message = '';
    for (const item of shopData) {
        if (item.question) {
            parse_mode: 'Markdown',
            message += `*${item.question}*\n\n`;
        }
        if (item.answer) {
            message += `${item.answer}\n\n`;
        }
    }

    await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'about_lucciola' },
                 { text: 'üìç –í –º–µ–Ω—é', callback_data: 'return_to_menu' }]
            ]
        }
    });
}


async function aboutLibrary(ctx) {
    const libraryData = aboutData.library;

    let message = '';
    for (const item of libraryData) {
        if (item.question) {
            parse_mode: 'Markdown',
            message += `*${item.question}*\n\n`;
        }
        if (item.answer) {
            message += `${item.answer}\n\n`;
        }
    }

    await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'about_lucciola' },
                 { text: 'üìç –í –º–µ–Ω—é', callback_data: 'return_to_menu' }]
            ]
        }
    });
}

async function aboutPreorder(ctx) {
    const preorderData = aboutData.preorder;

    let message = '';
    for (const item of preorderData) {
        if (item.question) {
            parse_mode: 'Markdown',
            message += `*${item.question}*\n\n`;
        }
        if (item.answer) {
            message += `${item.answer}\n\n`;
        }
    }

    await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'about_lucciola' },
                 { text: 'üìç –í –º–µ–Ω—é', callback_data: 'return_to_menu' }]
            ]
        }
    });
}

async function aboutDelivery(ctx) {
    const deliveryData = aboutData.delivery;

    let message = '';
    for (const item of deliveryData) {
        if (item.question) {
            message += `*${item.question}*\n\n`;
        }
        if (item.answer) {
            parse_mode: 'Markdown',
            message += `${item.answer}\n\n`;
        }
    }

    await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'about_lucciola' },
                 { text: 'üìç –í –º–µ–Ω—é', callback_data: 'return_to_menu' }]
            ]
        }
    });
}

// –ö–µ–π—Å –ø—Ä–µ–¥–∑–∞–∫–∞–∑

async function askForPreOrder(ctx) {
    const preOrderText = "–ó–∞–ø–æ–ª–Ω–∏ [—Ñ–æ—Ä–º—É](https://lucciola-books.vercel.app/preorder) –Ω–∞ —Å–∞–π—Ç–µ, –∏ –º—ã –∑–∞–∫–∞–∂–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–∏–≥—É. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –æ–∫–∞–∂–µ—Ç—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏, –º—ã —Ç–µ–±–µ —Å–æ–æ–±—â–∏–º üì´\n\n P.S. –ü—Ä–µ–¥–∑–∞–∫–∞–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π ü§ì";
    await ctx.reply(preOrderText, {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üìç –í –º–µ–Ω—é', callback_data: 'return_to_menu' }]
            ]
        },
        parse_mode: 'Markdown'
    });
}



// –û—Ç—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ 

bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handing update ${ctx.update.update_id}:`);
    const e = err.error;

    if (e instanceof GrammyError) {
        console.error('Error in request:', e.description);
    } else if (e instanceof HttpError) {
        console.e('Could not contact Telegram:', e);
    } else {
        console.error('Unknown error:', e);
    }
}); 

bot.start();

